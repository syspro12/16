1)****************************************************************************

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define OP 0
#define REG 1
#define INDEX 2

char variantI[30][90]; 
int varcnt=0; 	
char optab[15][8]={"stop","add","sub","mul","mover","movem","comp","bc","div","read","print","ds","dc","start","end"};
char regtab[4][5]={"Areg","Breg","Creg","Dreg"},sfname[30],tfname[30],instruction[30];
char reloptab[6][4]={"LT","LE","EQ","GT","GE","Any"},w1[10],w2[10],w3[10],w4[10];
int START,symcnt,tcnt,op,r,index1,LC,endflag,e,PC;


struct SYMBOL
{
	char symbol[10];
	int address,define,used,length,value;
}symtab[40];


int searchoptab(char w[])
{
	int i;
	for(i=0;i<15;i++)
	{
		if(stricmp(w,optab[i])==0)
			return i;
	}

	return -1;
}

int searchregtab(char w[])
{
	int i;
	for(i=0;i<4;i++)
	{
		if(stricmp(w,regtab[i])==0)
			return i+1;
	}

	return -1;
}

int searchreloptab(char w[])
{
	int i;
	for(i=0;i<6;i++)
	{
		if(stricmp(w,reloptab[i])==0)
			return i+1;
	}
	return -1;
}

int searchsymtab(char w[])
{
	int i;
	for(i=0;i<symcnt;i++)
	{
		if(stricmp(w,symtab[i].symbol)==0)
			return i;
	}
	i=symcnt++;
	strcpy(symtab[i].symbol,w);
	return i;
}

int issymbol(char w[])
{
	if(searchoptab(w)==-1 && searchregtab(w)==-1 && searchreloptab(w)==-1)
		return 1;
	else
	{
		return 0;
	}
}

void updatesymbol(char sym[])
{
	index1=searchsymtab(sym);
	symtab[index1].used=1;
}

void definesymbol(char sym[])
{
	index1=searchsymtab(sym);
	if(symtab[index1].define==0)
	{
		symtab[index1].define=1;
		symtab[index1].address=LC;
	}

	if(op==11)
	{
		int i,l;
		l=symtab[index1].length=atoi(w3);
		sprintf(variantI[varcnt++],"(DL,02) (C,%d) ",l);
		for(i=0;i<l;i++,    LC++  )
		LC--;
	}
	else if(op==12)
	{
		symtab[index1].length=1;
		symtab[index1].value=atoi(w3);
		sprintf(variantI[varcnt++],"(DL,01) (C,%d) ",symtab[index1].value);
	}
}

void actionplan1(char w1[])
{
	op=searchoptab(w1);
	if(op==0)
	{
		sprintf(variantI[varcnt++],"(IS,00)");
	}
	else if(op==14)
	{
		LC--;
		endflag=1;
		sprintf(variantI[varcnt++],"(AD,01)");
		return;
	}
	else if(op==13)	LC=-1;

}


void actionplan2(char w1[],char w2[])
{
	r=0;
	op=searchoptab(w1);
	if(op==9 || op==10)
	{
		if(issymbol(w2))
			updatesymbol(w2);
		sprintf(variantI[varcnt++],"(IS,%d) (S,%d)",op,index1);
	}
	else if(op==13)
	{
		START=LC=atoi(w2);
		sprintf(variantI[varcnt++],"(C,%d)",START);
		LC--;
	}
	else if(op==14)
	{
		index1=searchsymtab(w2);
		if(symtab[index1].define==1)
			PC=symtab[index1].address;

	}
	else
	{
		if(issymbol(w1))
		{
			op=searchoptab(w2);
			if(op==0)
			{
				definesymbol(w1);
				actionplan1(w2);
			}

		}
	}
}


void actionplan3(char w1[],char w2[],char w3[])
{
	op=searchoptab(w1);
	if((op>0 && op<7) || op==8)
	{
		r=searchregtab(w2);
		if(r>0 && r<5)
		{
			if(issymbol(w3))
				updatesymbol(w3);
			sprintf(variantI[varcnt++],"(IS,%d) %d (S,%d)",op,r,index1);
		}
	}
	else if(op==7)
	{
		r=searchreloptab(w2);
		if(r>=1 && r<=6)
		{
			if(issymbol(w3))
				updatesymbol(w3);
			sprintf(variantI[varcnt++],"(IS,%d) %d (S,%d)",op,r,index1);
		}
		
	}
	else
	{
		if(issymbol(w1))
		{
			op=searchoptab(w2);
			if(op==9 || op==10)
			{
				definesymbol(w1);
				actionplan2(w2,w3);
			}
			else if(op==11 || op==12)
				definesymbol(w1);
		}
	}
}

int main(int argc,char *argv[])
{
	FILE *fp;
	int i;
	if(argc>1)
	{
		strcpy(sfname,argv[1]);
	}
	else
	{
		printf("Enter a source file name: ");
		scanf("%s",sfname);
	}
	fp=fopen(sfname,"r");
	if(fp==NULL)
	{
	   printf("File not found..!\n"); 
	   return 0;
	}
	else
	{
		while(!feof(fp) && endflag==0)
		{
			fgets(instruction,40,fp);
			tcnt=sscanf(instruction,"%s %s %s %s",w1,w2,w3,w4);
			switch(tcnt)
			{
				case 1 : actionplan1(w1);break; 
				case 2 : actionplan2(w1,w2);break;  
				case 3 : actionplan3(w1,w2,w3);break; 
				default : printf("\nInvalid istruction");
			}
			LC++;
		}
	}

	printf("Symbol table\n");
	printf("Symbol\taddress\tdefine\tused\tlength\tvalue\n");
	printf("\n------------------------------------------");
		printf("\nSymbol Table\nSymbol\taddress\tdefine\tused\tlength\tvalue\n");
		for(i=0;i<symcnt;i++)       // travel till symcnt which is the next free entry in symbol table.
			printf("%s\t%d\t%d\t%d\t%d\t%d\n",symtab[i].symbol,symtab[i].address,symtab[i].define,symtab[i].used,symtab[i].length,symtab[i].value);

		printf("\n\nVariant I\n");
		for(i=0 ; i<varcnt ; i++)
			printf("%s\n",variantI[i]);
	

	fclose(fp);
	return 0;
}


2)****************************************************************************
#include<stdio.h>
#include<unistd.h>
#include<dirent.h>
#include<fcntl.h>

void count(char c, char *fn)
{
	int lc=0,wc=0,cc=0,handle;
	char ch;
	if((handle=open(fn,O_RDONLY))==-1)
	{
		printf("File %s not found\n",fn);
		return;
	}
	while(read(handle,&ch,1)!=0)
	{
		if(ch==' ')
			wc++;
		else if(ch=='\n')
			lc++;
		else
			cc++;
	}
	close(handle);
	switch(c)
	{
	case 'c':       printf("\n***********--ANS--***********\n");
			printf("Total No.of Characters = %d\n",cc);
			printf("\n*****************************\n");
                        break;
	case 'w':       printf("\n***********--ANS--***********\n");
			printf("Total No.of Words = %d\n",wc);
                        printf("\n*****************************\n");
			break;
	case 'l':       printf("\n***********--ANS--***********\n");
			printf("Total No.of Lines = %d\n",lc);
                        printf("\n*****************************\n");
			break;
	}
}

main()
{
	char command[80],t1[20],t2[20],t3[20],t4[20];
	int n;
	system("clear");
	while(1)
	{
		printf("myShell$");
		fflush(stdin);
		fgets(command,80,stdin);
		n = sscanf(command,"%s %s %s %s",t1,t2,t3,t4);
		switch(n)
		{
		case 1:
			if(!fork())
			{
				execlp(t1,t1,NULL);
				perror(t1);
			}
			break;
		case 2:
			if(!fork())
			{
				execlp(t1,t1,t2,NULL);
				perror(t1);
			}
			break;
		case 3:
			if(strcmp(t1,"count")==0)
				count(t2[0],t3);
			else
			{
				if(!fork())
				{
					execlp(t1,t1,t2,t3,NULL);
					perror(t1);
				}
			}
			break;
		case 4:
			if(!fork())
			{
				execlp(t1,t1,t2,t3,t4,NULL);
				perror(t1);
			}
		}
	}
}
